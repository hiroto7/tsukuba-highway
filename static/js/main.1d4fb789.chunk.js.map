{"version":3,"sources":["RoadList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoadList","props","react_default","a","createElement","Card","ListGroup","variant","Object","toConsumableArray","roads","map","roadName","Item","action","active","selected","key","onClick","endpoint","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","roadNames","road","zoom","center","lat","lng","updateRoadList","setState","fetch","concat","encodeURIComponent","headers","Accept","response","text","json","JSON","parse","e","console","error","results","bindings","binding","roadLabel","value","_context","t0","queries","Promise","all","_ref","asyncToGenerator","regenerator_default","mark","_callee2","query","wrap","_context2","prev","next","sent","abrupt","stop","_x2","apply","arguments","jsons","start","coordinate","start_lat","start_lng","names","Set","start_name","end","end_lat","end_lng","end_name","length","routeURI","route","lanesCounts","lanes_count","name","objectSpread","_context3","_this2","className","Navbar","bg","Brand","Spinner","animation","Container","fluid","Row","Col","xs","sm","md","xl","src_RoadList","undefined","getRoadDetails","span","offset","Header","Table","join","Map","zoomControl","maxZoom","onZoom","_ref3","target","getZoom","onMoveEnd","_ref4","getCenter","ZoomControl","position","TileLayer","url","attribution","Fragment","Marker","Popup","GeoJSON","data","style","weight","React","Component","Boolean","window","location","hostname","match","L","Icon","Default","imagePath","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d4fb789.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, ListGroup } from 'react-bootstrap';\n\nconst RoadList: React.FC<{ roads: Iterable<string>, selected?: string, onClick: (road: string) => void }> = props => (\n  <Card>{\n    <ListGroup variant=\"flush\">\n      {\n        [...props.roads].map((roadName: string) => (\n          <ListGroup.Item action active={roadName === props.selected} key={roadName} onClick={() => props.onClick(roadName)}>{roadName}</ListGroup.Item>\n        ))\n      }\n    </ListGroup>\n  }</Card>\n)\n\nexport default RoadList;","import React from 'react';\nimport './App.css';\nimport { Map, Marker, TileLayer, Popup, ZoomControl, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { Container, Row, Col, Navbar, Card, Spinner, Table } from 'react-bootstrap';\nimport RoadList from './RoadList';\nimport L from 'leaflet';\n\ninterface SPARQLQueryResults<V extends string> {\n  head: { vars: V[] },\n  results: {\n    bindings: Binding<V>[]\n  }\n}\n\ntype RDFTerm = { type: \"uri\", value: string }\n  | { type: \"literal\", value: string }\n  | { type: \"literal\", value: string, \"xml:lang\": string }\n  | { type: \"literal\", value: string, datatype: string }\n  | { type: \"bnode\", value: string }\ntype Binding<V extends string> = { [P in V]?: RDFTerm; }\n\ninterface Point {\n  coordinate: { lat: number, lng: number };\n  names: Iterable<string>;\n}\n\nconst endpoint = 'http://localhost:3030/tsukuba-highway/query';\n\nexport default class App extends React.Component<{}, {\n  isLoading: boolean,\n  roadNames: Iterable<string> | null,\n  road: {\n    name: string,\n    length: number,\n    lanesCounts: Iterable<number>,\n    start: Point,\n    end: Point,\n    route: GeoJSON.GeoJsonObject\n  } | null,\n  map: {\n    zoom: number,\n    center: { lat: number, lng: number }\n  }\n}> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      roadNames: null,\n      road: null,\n      map: {\n        zoom: 13,\n        center: { lat: 36.0824938, lng: 140.0958208 }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.updateRoadList();\n  }\n\n  async updateRoadList() {\n    try {\n      this.setState({ isLoading: true });\n\n      const query = `prefix bp: <http://www.coins.tsukuba.ac.jp/~s1711402/lod/tsukuba-highway/property/>\nprefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect distinct * where {\n  ?road bp:category \"road\" ;\n    rdfs:label ?roadLabel .\n}`;\n\n      const response = await fetch(`${endpoint}?query=${encodeURIComponent(query)}`, { headers: { Accept: 'application/sparql-results+json' } });\n      const text = await response.text();\n\n      const json: SPARQLQueryResults<'road' | 'roadLabel'> = (() => {\n        try {\n          return JSON.parse(text);\n        } catch (e) {\n          console.error(text);\n          throw e;\n        }\n      })();\n\n      const roadNames = (() => {\n        try {\n          return json.results.bindings.map(binding => (binding.roadLabel!.value));\n        } catch (e) {\n          console.error(json);\n          throw e;\n        }\n      })();\n      this.setState({ roadNames });\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  async getRoadDetails(roadName: string) {\n    try {\n      this.setState({ isLoading: true });\n\n      const queries = [\n        /* queries[0] */\n        `prefix bp: <http://www.coins.tsukuba.ac.jp/~s1711402/lod/tsukuba-highway/property/>\nprefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nprefix ic: <http://imi.go.jp/ns/core/rdf#>\n\nselect distinct ?start_lng ?start_lat ?end_lng ?end_lat ?length ?route ?lanes_count where {\n  ?road bp:category \"road\" ;\n    rdfs:label \"${roadName}\"@ja ;\n    bp:起点 ?start ;\n    bp:終点 ?end ;\n    bp:length ?length ;\n    bp:route ?route ;\n    bp:車線数 ?lanes_count .\n  {\n    ?start ic:経度 ?start_lng .\n    ?start ic:緯度 ?start_lat .\n    bind(2 as ?start_priority) .\n  } union {\n    ?start ic:座標 ?start_coordinate .\n    ?start_coordinate ic:経度 ?start_lng .\n    ?start_coordinate ic:緯度 ?start_lat .\n    bind(1 as ?start_priority) .\n  }\n\n  {\n    ?end ic:経度 ?end_lng .\n    ?end ic:緯度 ?end_lat .\n    bind(2 as ?end_priority) .\n  } union {\n    ?end ic:座標 ?end_coordinate .\n    ?end_coordinate ic:経度 ?end_lng .\n    ?end_coordinate ic:緯度 ?end_lat .\n    bind(1 as ?end_priority) .\n  }\n\n  filter(str(?end_lng) != \"\") .\n  filter(str(?end_lat) != \"\") .\n  filter(str(?start_lng) != \"\") .\n  filter(str(?start_lat) != \"\") .\n} order by desc(?start_priority) desc(?end_priority)`,\n\n        /* queries[1] */\n        `prefix bp: <http://www.coins.tsukuba.ac.jp/~s1711402/lod/tsukuba-highway/property/>\nprefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect distinct ?start_name ?end_name where {\n  ?road bp:category \"road\" ;\n    rdfs:label \"${roadName}\"@ja .\n  {\n    ?road bp:起点 ?start_name .\n    filter(isliteral(?start_name)) .\n  } union {\n    ?road bp:起点 ?start .\n    ?start rdfs:label ?start_name .\n  }\n  \n  {\n    ?road bp:終点 ?end_name .\n    filter(isliteral(?end_name)) .\n  } union {\n    ?road bp:終点 ?end .\n    ?end rdfs:label ?end_name .\n  }\n}`\n      ] as const;\n\n      const jsons = await Promise.all(queries.map(async query => {\n        const response = await fetch(`${endpoint}?query=${encodeURIComponent(query)}`, { headers: { Accept: 'application/sparql-results+json' } });\n        const text = await response.text();\n        try {\n          return JSON.parse(text);\n        } catch (e) {\n          console.error(text);\n          throw e;\n        }\n      })) as [\n          SPARQLQueryResults<'start_lng' | 'start_lat' | 'end_lng' | 'end_lat' | 'length' | 'route' | 'lanes_count'>,\n          SPARQLQueryResults<'start_name' | 'end_name'>\n        ];\n\n      const { length, lanesCounts, start, end, routeURI } = (() => {\n        try {\n          const start: Point = {\n            coordinate: {\n              lat: +jsons[0].results.bindings[0].start_lat!.value,\n              lng: +jsons[0].results.bindings[0].start_lng!.value\n            },\n            names: new Set(jsons[1].results.bindings.map(binding => binding.start_name!.value))\n          }\n          const end: Point = {\n            coordinate: {\n              lat: +jsons[0].results.bindings[0].end_lat!.value,\n              lng: +jsons[0].results.bindings[0].end_lng!.value\n            },\n            names: new Set(jsons[1].results.bindings.map(binding => binding.end_name!.value))\n          }\n\n          const length = +jsons[0].results.bindings[0].length!.value;\n          const routeURI = jsons[0].results.bindings[0].route!.value;\n          const lanesCounts = new Set(jsons[0].results.bindings.map(binding => +binding.lanes_count!.value));\n\n          return { length, lanesCounts, start, end, routeURI };\n        } catch (e) {\n          console.error(jsons[0], jsons[1]);\n          throw e;\n        }\n      })();\n\n      const response = await fetch(routeURI);\n      const text = await response.text();\n      const route = (() => {\n        try {\n          return JSON.parse(text);\n        } catch (e) {\n          console.error(text);\n          throw e;\n        }\n      })();\n\n      this.setState({\n        road: {\n          name: roadName,\n          route, length, lanesCounts, start, end\n        },\n        map: {\n          ...this.state.map,\n          center: {\n            lat: (start.coordinate.lat + end.coordinate.lat) / 2,\n            lng: (start.coordinate.lng + end.coordinate.lng) / 2\n          }\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar variant=\"dark\" bg=\"dark\" className=\"justify-content-between\">\n          <Navbar.Brand>つくば市周辺の幹線道路</Navbar.Brand>\n          {this.state.isLoading ? (<Spinner animation=\"border\" variant=\"primary\" />) : ''}\n        </Navbar>\n        <main>\n          <Container fluid className=\"mt-4\">\n            <Row>\n              <Col xs={12} sm={6} md={3} xl={2} className=\"mb-4\">{\n                this.state.roadNames === null ? '' : (\n                  <RoadList selected={this.state.road === null ? undefined : this.state.road.name} roads={this.state.roadNames} onClick={roadName => this.getRoadDetails(roadName)} />\n                )\n              }</Col>\n              <Col xs={12} sm={6} md={{ span: 4, offset: 5 }} xl={{ span: 3, offset: 7 }} className=\"mb-4\">{\n                this.state.road === null ? '' : (\n                  <Card>\n                    <Card.Header>{this.state.road.name}</Card.Header>\n                    <Table className=\"mb-0\">\n                      <tbody>\n                        <tr>\n                          <th>長さ</th><td className=\"text-right\">{this.state.road.length} km</td>\n                        </tr>\n                        <tr>\n                          <th>車線数</th><td className=\"text-right\">{[...this.state.road.lanesCounts].join(' / ')}</td>\n                        </tr>\n                        <tr>\n                          <th>起点</th>\n                          <td className=\"text-right\">{\n                            [...this.state.road.start.names].map(name => (<div key={name}>{name}</div>))\n                          }</td>\n                        </tr>\n                        <tr>\n                          <th>終点</th>\n                          <td className=\"text-right\">{\n                            [...this.state.road.end.names].map(name => (<div key={name}>{name}</div>))\n                          }</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </Card>\n                )\n              }</Col>\n            </Row>\n          </Container>\n\n          <Map zoom={this.state.map.zoom} zoomControl={false}\n            center={this.state.map.center}\n            maxZoom={18}\n            onZoom={({ target }: { target: L.Map }) => this.setState({ map: { ...this.state.map, zoom: target.getZoom() } })}\n            onMoveEnd={({ target }: { target: L.Map }) => this.setState({ map: { ...this.state.map, center: target.getCenter() } })}>\n            <ZoomControl position=\"bottomright\" />\n            <TileLayer\n              url=\"https://cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png\"\n              attribution=\"<a href='https://maps.gsi.go.jp/development/ichiran.html' target='_blank'>地理院タイル</a>\"\n            />\n            {\n              this.state.road === null || !('start' in this.state.road) ? '' : (\n                <>\n                  <Marker position={this.state.road.start.coordinate}>\n                    <Popup key={this.state.road.name}>\n                      <h6>起点</h6>\n                      {[...this.state.road.start.names].map(name => (<div key={name}>{name}</div>))}\n                      <div>{this.state.road.start.coordinate.lat}, {this.state.road.start.coordinate.lng}</div>\n                    </Popup>\n                  </Marker>\n\n                  <Marker position={this.state.road.end.coordinate}>\n                    <Popup key={this.state.road.name}>\n                      <h6>終点</h6>\n                      {[...this.state.road.end.names].map(name => (<div key={name}>{name}</div>))}\n                      <div>{this.state.road.end.coordinate.lat}, {this.state.road.end.coordinate.lng}</div>\n                    </Popup>\n                  </Marker>\n\n                  <GeoJSON key={this.state.road.name} data={this.state.road.route} style={{ weight: 6 }} />\n                </>\n              )\n            }\n\n          </Map>\n        </main>\n      </div >\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport L from 'leaflet'\nL.Icon.Default.imagePath = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}